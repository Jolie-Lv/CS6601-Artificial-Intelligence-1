
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: notebook.ipynb

import time
from isolation import Board

# Credits if any
# 1)
# 2)
# 3)

class OpenMoveEvalFn:
    def score(self, game, my_player=None):
        """Score the current game state
        Evaluation function that outputs a score equal to how many
        moves are open for AI player on the board minus how many moves
        are open for Opponent's player on the board.

        Note:
            If you think of better evaluation function, do it in CustomEvalFn below.

            Args
                game (Board): The board and game state.
                my_player (Player object): This specifies which player you are.

            Returns:
                float: The current state's score. MyMoves-OppMoves.

            """

        # TODO: finish this function!
        # raise NotImplementedError
        my_moves = game.get_player_moves(my_player=my_player)
        op_moves = game.get_opponent_moves(my_player=my_player)

        return len(my_moves)-len(op_moves)

######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
################ END OF LOCAL TEST CODE SECTION ######################

class CustomEvalFn:
    def __init__(self):
        pass

    def score(self, game, my_player=None):
        """Score the current game state.

        Custom evaluation function that acts however you think it should. This
        is not required but highly encouraged if you want to build the best
        AI possible.

        Args:
            game (Board): The board and game state.
            my_player (Player object): This specifies which player you are.

        Returns:
            float: The current state's score, based on your own heuristic.
        """
        my_moves = game.get_player_moves(my_player=my_player)
        op_moves = game.get_opponent_moves(my_player=my_player)

        return len(my_moves)**2-len(op_moves)**2
        # TODO: finish this function!
        # raise NotImplementedError

######################################################################
############ DON'T WRITE ANY CODE OUTSIDE THE CLASS! #################
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############
######################################################################

import random
class CustomPlayer:
    # TODO: finish this class!
    """Player that chooses a move using your evaluation function
    and a minimax algorithm with alpha-beta pruning.
    You must finish and test this player to make sure it properly
    uses minimax and alpha-beta to return a good move."""

    def __init__(self, search_depth=5, eval_fn=OpenMoveEvalFn()):
        """Initializes your player.

        if you find yourself with a superior eval function, update the default
        value of `eval_fn` to `CustomEvalFn()`

        Args:
            search_depth (int): The depth to which your agent will search
            eval_fn (function): Evaluation function used by your agent
        """
        self.eval_fn = eval_fn
        self.search_depth = search_depth
        self.move_cache = {}
        self.move_mirroring = False
        self.ID_search = False

    def move(self, game, time_left):
        """Called to determine one move by your agent

        Note:
            1. Do NOT change the name of this 'move' function. We are going to call
            this function directly.
            2. Call alphabeta instead of minimax once implemented.
        Args:
            game (Board): The board and game state.
            time_left (function): Used to determine time left before timeout

        Returns:
            tuple: (int,int,bool): Your best move
        """
        best_move = None

        if game.move_count == 0:
            best_move = (3, 3, False)
            self.move_mirroring = True
            return best_move

        elif game.move_count == 1:
            if game.is_spot_open(3,3):
                best_move = (3, 3, False)
            else:
                best_move = random.choice(((1, 2, False), (1, 4, False), (2, 5, False), (4, 5, False), \
                                          (5, 4, False), (5, 2, False), (4, 1, False), (2, 1, False)))
            return best_move

            return best_move

        elif self.move_mirroring is True:
            last_op_move = game.get_opponent_position(game.get_active_player())
            mirror_move = (3+(3-last_op_move[0]),3+(3-last_op_move[1]),False)
            if mirror_move in game.get_player_moves(game.get_active_player()):
                best_move = mirror_move
                return best_move
            else:
                self.move_mirroring = False

        if best_move is None:
#             if game.move_count < 10:
#                 best_move, utility = alphabeta(self, game, time_left, depth=self.search_depth)
#             else:
#                 best_move, utility = alphabeta(self, game, time_left, depth=2+self.search_depth)
            best_move, utility = alphabeta(self, game, time_left, depth=self.search_depth)

        best_move, utility = alphabeta(self, game, time_left, depth=self.search_depth)
        return best_move

    def utility(self, game, my_turn):
        """You can handle special cases here (e.g. endgame)"""
        u = None
        u = self.eval_fn.score(game, game.get_active_player())
        if not my_turn:
            u = u * -1
        return u

###################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE CLASS! ################
###### IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ###########
###################################################################

class CustomPlayerAlphaBeta:
    # TODO: finish this class!
    """Player that chooses a move using your evaluation function
    and a minimax algorithm with alpha-beta pruning.
    You must finish and test this player to make sure it properly
    uses minimax and alpha-beta to return a good move."""

    def __init__(self, search_depth=4, eval_fn=OpenMoveEvalFn(), state_hist={}):
        """Initializes your player.

        if you find yourself with a superior eval function, update the default
        value of `eval_fn` to `CustomEvalFn()`

        Args:
            search_depth (int): The depth to which your agent will search
            eval_fn (function): Evaluation function used by your agent
        """
        self.eval_fn = eval_fn
        self.search_depth = search_depth
        self.move_cache = {}

    def move(self, game, time_left):
        """Called to determine one move by your agent

        Note:
            1. Do NOT change the name of this 'move' function. We are going to call
            this function directly.
            2. Call alphabeta instead of minimax once implemented.
        Args:
            game (Board): The board and game state.
            time_left (function): Used to determine time left before timeout

        Returns:
            tuple: (int,int,bool): Your best move
        """
        if game.move_count == 0:
            best_move = (3, 3, False)

        else:
            # best_move, utility = minimax(self, game, time_left, depth=self.search_depth)
            best_move, utility = alphabeta_vanilla(self, game, time_left, depth=self.search_depth)

        return best_move

    def utility(self, game, my_turn):
        """You can handle special cases here (e.g. endgame)"""
        return self.eval_fn.score(game, self)

###################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE CLASS! ################
###### IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ###########
###################################################################

def max_value(player, game, time_left, max_depth, curr_depth, alpha, beta, my_turn):
    if curr_depth == max_depth:
        v = player.eval_fn.score(game, game.get_active_player())
        return None, v

    else:
        v = float("-inf")
        moves = game.get_player_moves(game.get_active_player())
        for move in moves:
            new_board, is_over, is_winner = game.forecast_move(move)
            if is_over:
                return move, +50

            if time_left() < 5:
                return move, player.eval_fn.score(new_board, new_board.get_active_player())

            else:
                _, val = min_value(player, new_board, time_left, max_depth, curr_depth+1, alpha, beta, not my_turn)

            if val >= beta:
                return None, v

            if val > v:
                best_move = move
                v = val

            alpha = max(alpha, v)

    return best_move, v

def min_value(player, game, time_left, max_depth, curr_depth, alpha, beta, my_turn):
    if curr_depth == max_depth:
        return None, -1*player.eval_fn.score(game, game.get_active_player())

    else:
        v = float("inf")
        moves = game.get_player_moves(game.get_active_player())
        for move in moves:
            new_board, is_over, is_winner = game.forecast_move(move)

            if is_over:
                return move, -50

            if time_left() < 5:
                return move, -1*player.eval_fn.score(new_board, new_board.get_active_player())

            else:
                _, val = max_value(player, new_board, time_left, max_depth, curr_depth+1, alpha, beta, not my_turn)

            if v <= alpha:
                return None, v

            if val < v:
                best_move = move
                v = val

            beta = max(beta, v)

    return best_move, v

def alphabeta(player, game, time_left, depth, alpha=float("-inf"), beta=float("inf"), my_turn=True):
    """Implementation of the alphabeta algorithm.

    Args:
        player (CustomPlayer): This is the instantiation of CustomPlayer()
            that represents your agent. It is used to call anything you need
            from the CustomPlayer class (the utility() method, for example,
            or any class variables that belong to CustomPlayer())
        game (Board): A board and game state.
        time_left (function): Used to determine time left before timeout
        depth: Used to track how deep you are in the search tree
        alpha (float): Alpha value for pruning
        beta (float): Beta value for pruning
        my_turn (bool): True if you are computing scores during your turn.

    Returns:
        (tuple, int): best_move, val
    """
    # if my_turn: return max_value(player, game, time_left, depth, 0, alpha, beta, my_turn)
    # else: return min_value(player, game, time_left, depth, 0, alpha, beta, my_turn)
    return max_value(player, game, time_left, depth, 0, alpha, beta, my_turn)

######################################################################
########## DON'T WRITE ANY CODE OUTSIDE THE FUNCTION! ################
######## IF YOU WANT TO CALL OR TEST IT CREATE A NEW CELL ############
######################################################################
##### CODE BELOW IS USED FOR RUNNING LOCAL TEST DON'T MODIFY IT ######
# tests.alphabetaTest1(CustomPlayer, alphabeta) #you can uncomment this line to run your test
# %time tests.alphabetaTest2(CustomPlayer, alphabeta) #you can uncomment this line to run your test
# tests.beatRandom(CustomPlayer)
# tests.beatMiniMax(CustomPlayerAlphaBeta, CustomPlayer)
################ END OF LOCAL TEST CODE SECTION ######################